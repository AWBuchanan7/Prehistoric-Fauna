buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}
apply plugin: "net.minecraftforge.gradle.forge"
def mod_file = getModFile()
version = getModField("VERSION", mod_file)
def llibrary_version = getModField("LLIBRARY_VERSION", mod_file)
group = "prehistoricfauna"
archivesBaseName = "prehistoricfauna"
sourceCompatibility = targetCompatibility = "1.8"
minecraft {
    version = "1.12.2-14.23.5.2838"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}
 repositories {
    mavenCentral()
    maven {
        url = "https://maven.mcmoddev.com"
    }

    maven {
        url = "https://minecraft.curseforge.com/api/maven/"
    }

}
dependencies {
    deobfCompile "net.ilexiconn:llibrary:1.7.17-1.12.2"
}
processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "llibrary_version", llibrary_version
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": project.version, "mcversion": project.minecraft.version, "llibrary_version": llibrary_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}
jar {
    manifest {
        attributes "FMLAT": "pf_at.cfg"
    }
}
task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
    manifest {
        attributes "FMLAT": "pf_at.cfg"
    }
}
String getModFile() {
    String path = ""
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim()
                if (s.matches("@Mod\\s*\\(.*")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path
}
String getModField(String type, String mod_file) {
    if (mod_file.length() == 0) {
        return ""
    }
    String field = ""
    String prefix = "public static final String $type = \""
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2)
            field = s
        }
    }
    return field
}
